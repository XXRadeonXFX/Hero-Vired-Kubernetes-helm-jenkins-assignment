pipeline {
  agent any

  environment {
    DOCKER_CREDS_ID = 'DOCKER-PRINCE-CRED'
    AWS_CREDS_ID    = 'PRINCE-AWS-CRED'
    BACKEND_IMAGE   = "xxradeonxfx/learner-backend:latest"
    FRONTEND_IMAGE  = "xxradeonxfx/learner-frontend:latest"
    CLUSTER_NAME    = "prince-eks"
    REGION          = "ap-south-1"
  }

  stages {
    stage('Configure AWS CLI for EKS') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: "${AWS_CREDS_ID}"
        ]]) {
          sh '''
            aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
            kubectl config use-context arn:aws:eks:$REGION:$(aws sts get-caller-identity --query Account --output text):cluster/$CLUSTER_NAME
          '''
        }
      }
    }

    stage('Build & Push Backend Image') {
      steps {
        dir('learnerReportCS_backend') {
          withCredentials([usernamePassword(
            credentialsId: "${DOCKER_CREDS_ID}",
            usernameVariable: 'USERNAME',
            passwordVariable: 'PASSWORD'
          )]) {
            sh '''
              docker build -t $BACKEND_IMAGE .
              echo $PASSWORD | docker login -u $USERNAME --password-stdin
              docker push $BACKEND_IMAGE
            '''
          }
        }
      }
    }

    stage('Build & Push Frontend Image') {
      steps {
        dir('learnerReportCS_frontend') {
          withCredentials([usernamePassword(
            credentialsId: "${DOCKER_CREDS_ID}",
            usernameVariable: 'USERNAME',
            passwordVariable: 'PASSWORD'
          )]) {
            sh '''
              docker build -t $FRONTEND_IMAGE .
              echo $PASSWORD | docker login -u $USERNAME --password-stdin
              docker push $FRONTEND_IMAGE
            '''
          }
        }
      }
    }

    stage('Deploy MongoDB') {
      steps {
        dir('mongodb') {
          // Now explicitly mention the namespace and suppress openapi validation
          sh '''
            kubectl apply -n database -f mongodb-deployment.yaml --validate=false
            kubectl apply -n database -f mongodb-service.yaml --validate=false
          '''
        }
      }
    }

    stage('Deploy to EKS via Helm') {
      steps {
        dir('mern-deployment/helm') {
          sh '''
            helm upgrade --install mern ./mern-chart \
              --set backend.image=$BACKEND_IMAGE \
              --set frontend.image=$FRONTEND_IMAGE \
              --namespace default
          '''
        }
      }
    }
  }

  post {
    success {
      echo "✅ All stages executed successfully!"
    }
    failure {
      echo "❌ Pipeline failed. Please check the logs."
    }
  }
}

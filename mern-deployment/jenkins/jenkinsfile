pipeline {
  agent any

  environment {
    DOCKER_CREDS_ID = 'DOCKER-PRINCE-CRED'
    AWS_CREDS_ID    = 'PRINCE-AWS-CRED'
    BACKEND_IMAGE   = "xxradeonxfx/learner-backend:latest"
    FRONTEND_IMAGE  = "xxradeonxfx/learner-frontend:latest"
    CLUSTER_NAME    = "prince-eks"
    REGION          = "ap-south-1"
    KUBECONFIG      = "/var/lib/jenkins/.kube/config"
  }

  stages {
    stage('Checkout Code') {
      steps {
        checkout scm
      }
    }

    stage('Configure AWS CLI for EKS') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDS_ID}"]]) {
          sh '''
            mkdir -p $(dirname "$KUBECONFIG")
            export KUBECONFIG=$KUBECONFIG
            aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
            kubectl config use-context arn:aws:eks:$REGION:$(aws sts get-caller-identity --query Account --output text):cluster/$CLUSTER_NAME
            kubectl get nodes
          '''
        }
      }
    }

    stage('Build & Push Backend Image') {
      steps {
        dir('learnerReportCS_backend') {
          withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDS_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            sh '''
              docker build -t $BACKEND_IMAGE .
              echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin
              docker push $BACKEND_IMAGE
            '''
          }
        }
      }
    }

    stage('Build & Push Frontend Image') {
      steps {
        dir('learnerReportCS_frontend') {
          withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDS_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            sh '''
              docker build -t $FRONTEND_IMAGE .
              echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin
              docker push $FRONTEND_IMAGE
            '''
          }
        }
      }
    }

    stage('Deploy MongoDB') {
      steps {
        dir('mongodb') {
          sh '''
            export KUBECONFIG=$KUBECONFIG
            kubectl get namespace database || kubectl create namespace database
            kubectl apply -f mongodb-deployment.yaml -n database
            kubectl apply -f mongodb-service.yaml -n database
          '''
        }
      }
    }

    stage('Deploy to EKS via Helm') {
      steps {
        dir('helm/mern-chart') {
          sh '''
            export KUBECONFIG=$KUBECONFIG
            helm upgrade --install learner-app . --namespace default --wait
          '''
        }
      }
    }
  }

  post {
    success {
      echo "✅ Deployment successful!"
    }
    failure {
      echo "❌ Pipeline failed. Check the logs."
    }
  }
}

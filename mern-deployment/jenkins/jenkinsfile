pipeline {
  agent any

  environment {
    BACKEND_IMAGE  = "xxradeonxfx/learner-backend:latest"
    FRONTEND_IMAGE = "xxradeonxfx/learner-frontend:latest"

    AWS_REGION     = 'us-west-1'
    CLUSTER_NAME   = 'your-eks-cluster-name' // <-- change this

    DOCKER_CREDS_ID = 'DOCKER-PRINCE-CRED'
    AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
  }

  stages {

    stage('Clone Backend Repo') {
      steps {
        git branch: 'main', url: 'https://github.com/UnpredictablePrashant/learnerReportCS_backend'
      }
    }

    stage('Build & Push Backend Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDS_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
          sh """
            docker build -t $BACKEND_IMAGE .
            echo \$PASSWORD | docker login -u \$USERNAME --password-stdin
            docker push $BACKEND_IMAGE
          """
        }
      }
    }

    stage('Clone Frontend Repo') {
      steps {
        dir('frontend') {
          git branch: 'main', url: 'https://github.com/UnpredictablePrashant/learnerReportCS_frontend'
        }
      }
    }

    stage('Build & Push Frontend Image') {
      steps {
        dir('frontend') {
          withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDS_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            sh """
              docker build -t $FRONTEND_IMAGE .
              echo \$PASSWORD | docker login -u \$USERNAME --password-stdin
              docker push $FRONTEND_IMAGE
            """
          }
        }
      }
    }

    stage('Configure AWS + kubectl') {
      steps {
        sh '''
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION

          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
          kubectl get nodes
        '''
      }
    }

    stage('Deploy with Helm') {
      steps {
        dir('helm') {
          sh """
            helm upgrade --install mern ./mern-chart \
              --set backend.image=$BACKEND_IMAGE \
              --set frontend.image=$FRONTEND_IMAGE \
              --namespace default
          """
        }
      }
    }
  }

  post {
    success {
      echo '✅ Full Deployment Successful!'
    }
    failure {
      echo '❌ Build or Deployment Failed.'
    }
  }
}

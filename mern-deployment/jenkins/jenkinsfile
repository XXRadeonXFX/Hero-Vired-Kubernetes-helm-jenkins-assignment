pipeline {
  agent any
  environment {
    DOCKER_CREDS_ID = 'DOCKER-PRINCE-CRED'
    AWS_CREDS_ID    = 'PRINCE-AWS-CRED'
    DOCKER_USERNAME = "xxradeonxfx"
    BACKEND_IMAGE   = "${DOCKER_USERNAME}/learner-backend:latest"
    FRONTEND_IMAGE  = "${DOCKER_USERNAME}/learner-frontend:latest"
    CLUSTER_NAME    = "prince-eks"
    REGION          = "ap-south-1"
    KUBECONFIG      = "/var/lib/jenkins/.kube/config"
  }
  
  stages {
    stage('Checkout Code') {
      steps {
        checkout scm
      }
    }
    
    stage('Configure AWS CLI for EKS') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDS_ID}"]]) {
          sh '''
            mkdir -p $(dirname "$KUBECONFIG")
            export KUBECONFIG=$KUBECONFIG
            aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
            
            # Get account ID for context
            ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            
            # Set the context
            kubectl config use-context arn:aws:eks:$REGION:$ACCOUNT_ID:cluster/$CLUSTER_NAME
            
            # Verify connection
            kubectl get nodes
            
            # Verify authentication
            kubectl auth can-i get pods --namespace=default || echo "Warning: Limited permissions"
          '''
        }
      }
    }
    
    stage('Build & Push Backend Image') {
      steps {
        dir('learnerReportCS_backend') {
          withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDS_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            sh '''
              echo "üî® Building backend image: $BACKEND_IMAGE"
              docker build -t $BACKEND_IMAGE .
              
              echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin
              echo "üì§ Pushing backend image..."
              docker push $BACKEND_IMAGE
              
              echo "‚úÖ Backend image pushed successfully"
            '''
          }
        }
      }
    }
    
    stage('Build & Push Frontend Image') {
      steps {
        dir('learnerReportCS_frontend') {
          withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDS_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            sh '''
              echo "üî® Building frontend image: $FRONTEND_IMAGE"
              docker build -t $FRONTEND_IMAGE .
              
              echo "üì§ Pushing frontend image..."
              docker push $FRONTEND_IMAGE
              
              echo "‚úÖ Frontend image pushed successfully"
            '''
          }
        }
      }
    }
    
    stage('Deploy MongoDB') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDS_ID}"]]) {
          dir('mongodb') {
            sh '''
              # Re-export environment variables and refresh kubeconfig
              export KUBECONFIG=$KUBECONFIG
              export AWS_DEFAULT_REGION=$REGION
              
              # Refresh the kubeconfig to ensure we have valid credentials
              aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
              
              # Get account ID and set context
              ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
              kubectl config use-context arn:aws:eks:$REGION:$ACCOUNT_ID:cluster/$CLUSTER_NAME
              
              # Verify we can connect
              echo "üîç Checking cluster connection..."
              kubectl cluster-info
              
              # Create namespace if it doesn't exist
              echo "üì¶ Creating/checking database namespace..."
              kubectl get namespace database || kubectl create namespace database
              
              # Check if MongoDB is already running and healthy
              echo "üîç Checking if MongoDB is already deployed..."
              if kubectl get deployment mongodb -n database >/dev/null 2>&1; then
                echo "üìã MongoDB deployment exists. Checking health..."
                READY_REPLICAS=$(kubectl get deployment mongodb -n database -o jsonpath='{.status.readyReplicas}')
                DESIRED_REPLICAS=$(kubectl get deployment mongodb -n database -o jsonpath='{.spec.replicas}')
                
                if [ "$READY_REPLICAS" = "$DESIRED_REPLICAS" ] && [ "$READY_REPLICAS" != "" ]; then
                  echo "‚úÖ MongoDB is healthy. Skipping deployment."
                else
                  echo "‚ö†Ô∏è MongoDB exists but not healthy. Redeploying..."
                  kubectl delete deployment mongodb -n database --wait=true || echo "Failed to delete MongoDB deployment"
                  kubectl delete service mongodb-service -n database --wait=true || echo "Failed to delete MongoDB service"
                  sleep 10
                  
                  echo "üì¶ Deploying fresh MongoDB..."
                  kubectl apply -f mongodb-deployment.yaml -n database
                  kubectl apply -f mongodb-service.yaml -n database
                  
                  echo "‚è≥ Waiting for MongoDB to be ready..."
                  kubectl wait --for=condition=available --timeout=300s deployment/mongodb -n database
                fi
              else
                echo "üì¶ MongoDB not found. Deploying MongoDB..."
                kubectl apply -f mongodb-deployment.yaml -n database
                kubectl apply -f mongodb-service.yaml -n database
                
                echo "‚è≥ Waiting for MongoDB to be ready..."
                kubectl wait --for=condition=available --timeout=300s deployment/mongodb -n database
              fi
              
              # Verify deployment and test connection
              echo "üîç Verifying MongoDB deployment..."
              kubectl get pods -n database
              kubectl get services -n database
              
              # Test MongoDB connectivity
              echo "üß™ Testing MongoDB connectivity..."
              kubectl run mongodb-test --image=mongo:5.0 --rm -i --restart=Never --namespace=database -- \
                mongo --host mongodb-service.database.svc.cluster.local:27017 --eval "db.adminCommand('ping')" || \
                echo "‚ö†Ô∏è MongoDB connectivity test failed, but continuing..."
              
              echo "‚úÖ MongoDB deployment completed"
            '''
          }
        }
      }
    }
    
    stage('Clean Existing Application Deployments') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDS_ID}"]]) {
          sh '''
            # Re-export environment variables and refresh kubeconfig
            export KUBECONFIG=$KUBECONFIG
            export AWS_DEFAULT_REGION=$REGION
            
            # Refresh the kubeconfig
            aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
            
            # Get account ID and set context
            ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            kubectl config use-context arn:aws:eks:$REGION:$ACCOUNT_ID:cluster/$CLUSTER_NAME
            
            echo "üîç Cleaning existing application deployments..."
            
            # Remove failed Helm releases
            echo "üìã Checking for existing Helm releases..."
            EXISTING_RELEASES=$(helm list -n default -q 2>/dev/null || echo "")
            
            if [ ! -z "$EXISTING_RELEASES" ]; then
              echo "Found existing Helm releases: $EXISTING_RELEASES"
              for release in $EXISTING_RELEASES; do
                if [ "$release" != "mongodb" ] && [ "$release" != "mongo" ]; then
                  echo "üóëÔ∏è Uninstalling existing release: $release"
                  helm uninstall $release -n default --wait --timeout=5m || echo "Failed to uninstall $release"
                else
                  echo "‚ö†Ô∏è Skipping MongoDB-related release: $release"
                fi
              done
            fi
            
            # Clean up any remaining application resources
            echo "üßπ Cleaning up remaining application resources..."
            kubectl delete deployment learner-backend -n default --ignore-not-found=true --wait=true --timeout=300s
            kubectl delete deployment learner-frontend -n default --ignore-not-found=true --wait=true --timeout=300s
            kubectl delete service learner-backend-service -n default --ignore-not-found=true --wait=true --timeout=60s
            kubectl delete service learner-frontend-service -n default --ignore-not-found=true --wait=true --timeout=60s
            
            # Wait for complete cleanup
            echo "‚è≥ Waiting for complete cleanup..."
            sleep 15
            
            # Verify cleanup
            echo "üîç Verifying cleanup..."
            kubectl get deployments -n default | grep learner || echo "‚úÖ No learner deployments found!"
            kubectl get services -n default | grep learner || echo "‚úÖ No learner services found!"
            
            echo "‚úÖ Cleanup completed!"
          '''
        }
      }
    }
    
    stage('Deploy Application via Helm') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDS_ID}"]]) {
          dir('helm/mern-chart') {
            sh '''
              # Re-export environment variables and refresh kubeconfig
              export KUBECONFIG=$KUBECONFIG
              export AWS_DEFAULT_REGION=$REGION
              
              # Refresh the kubeconfig
              aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
              
              # Get account ID and set context
              ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
              kubectl config use-context arn:aws:eks:$REGION:$ACCOUNT_ID:cluster/$CLUSTER_NAME
              
              # Verify Helm is available
              echo "üîß Checking Helm installation..."
              helm version
              
              # Validate Helm chart
              echo "‚úÖ Validating Helm chart..."
              helm lint .
              
              # Show what will be deployed (template dry-run)
              echo "üìã Helm template preview:"
              helm template learner-app . \\
                --set backend.image=$BACKEND_IMAGE \\
                --set frontend.image=$FRONTEND_IMAGE \\
                --set backend.replicas=1 \\
                --set frontend.replicas=1
              
              # Deploy with Helm
              echo "üöÄ Deploying application with Helm..."
              echo "Backend Image: $BACKEND_IMAGE"
              echo "Frontend Image: $FRONTEND_IMAGE"
              echo "Backend Replicas: 1"
              echo "Frontend Replicas: 1"
              
              helm upgrade --install learner-app . \\
                --namespace default \\
                --wait \\
                --timeout=10m \\
                --set backend.image=$BACKEND_IMAGE \\
                --set frontend.image=$FRONTEND_IMAGE \\
                --set backend.replicas=1 \\
                --set frontend.replicas=1 \\
                --atomic \\
                --debug
              
              # Wait a moment for pods to start
              echo "‚è≥ Waiting for pods to start..."
              sleep 30
              
              # Verify deployment
              echo "üîç Verifying deployment..."
              kubectl get pods -n default
              kubectl get services -n default
              
              # Check pod logs for immediate issues
              echo "üìã Checking backend logs..."
              kubectl logs deployment/learner-backend -n default --tail=20 || echo "Could not get backend logs yet"
              
              echo "üìã Checking frontend logs..."
              kubectl logs deployment/learner-frontend -n default --tail=20 || echo "Could not get frontend logs yet"
              
              # Test MongoDB connectivity from backend
              echo "üß™ Testing MongoDB connectivity from backend..."
              BACKEND_POD=$(kubectl get pods -n default -l app=learner-backend -o jsonpath='{.items[0].metadata.name}')
              if [ ! -z "$BACKEND_POD" ]; then
                kubectl exec $BACKEND_POD -n default -- nslookup mongodb-service.database.svc.cluster.local || echo "DNS lookup failed"
              fi
              
              # Show deployment status
              echo "üìä Deployment status:"
              kubectl rollout status deployment/learner-backend -n default --timeout=300s || echo "Backend rollout timeout"
              kubectl rollout status deployment/learner-frontend -n default --timeout=300s || echo "Frontend rollout timeout"
              
              # Show Helm release status
              echo "üìà Helm release status:"
              helm status learner-app -n default
              
              echo "‚úÖ Deployment completed!"
            '''
          }
        }
      }
    }
  }
  
  post {
    success {
      echo "‚úÖ Deployment successful!"
      script {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDS_ID}"]]) {
          sh '''
            export KUBECONFIG=$KUBECONFIG
            aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
            
            echo "=== üéâ Deployment Summary ==="
            echo "üì¶ MongoDB Pods (Database Namespace):"
            kubectl get pods -n database
            echo ""
            echo "üöÄ Application Pods (Default Namespace) - 1 Pod Each:"
            kubectl get pods -n default
            echo ""
            echo "üåê Services:"
            kubectl get services -n default
            kubectl get services -n database
            echo ""
            echo "üì° LoadBalancer External IP (Frontend):"
            EXTERNAL_IP=$(kubectl get service learner-frontend-service -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
            if [ ! -z "$EXTERNAL_IP" ]; then
              echo "üåç Frontend URL: http://$EXTERNAL_IP"
            else
              echo "‚è≥ External IP pending... Check with: kubectl get service learner-frontend-service -n default"
            fi
            echo ""
            echo "üìä Helm Releases:"
            helm list -n default
            echo ""
            echo "üîó Internal Service URLs:"
            echo "  Backend: http://learner-backend-service:3000"
            echo "  MongoDB: mongodb://mongodb-service.database.svc.cluster.local:27017"
          '''
        }
      }
    }
    failure {
      echo "‚ùå Pipeline failed. Check the logs."
      script {
        try {
          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDS_ID}"]]) {
            sh '''
              export KUBECONFIG=$KUBECONFIG
              aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
              
              echo "=== üö® Debug Information ==="
              kubectl cluster-info || echo "Cannot connect to cluster"
              
              echo "=== üìã All Pods Status ==="
              echo "Default namespace:"
              kubectl get pods -n default -o wide || echo "Cannot get default namespace pods"
              echo "Database namespace:"
              kubectl get pods -n database -o wide || echo "Cannot get database namespace pods"
              
              echo "=== üìã Backend Pod Logs ==="
              kubectl logs deployment/learner-backend -n default --tail=50 || echo "Cannot get backend logs"
              
              echo "=== üìã Frontend Pod Logs ==="
              kubectl logs deployment/learner-frontend -n default --tail=50 || echo "Cannot get frontend logs"
              
              echo "=== üìã MongoDB Pod Logs ==="
              kubectl logs deployment/mongodb -n database --tail=30 || echo "Cannot get MongoDB logs"
              
              echo "=== üìã Services and Endpoints ==="
              kubectl get services -n default || echo "Cannot get default services"
              kubectl get services -n database || echo "Cannot get database services"
              kubectl get endpoints -n default || echo "Cannot get default endpoints"
              kubectl get endpoints -n database || echo "Cannot get database endpoints"
              
              echo "=== üìã Recent Events ==="
              kubectl get events --sort-by=.metadata.creationTimestamp -n default | tail -20 || echo "Cannot get default events"
              kubectl get events --sort-by=.metadata.creationTimestamp -n database | tail -10 || echo "Cannot get database events"
              
              echo "=== üìã Helm Status ==="
              helm list -n default || echo "Cannot get helm releases"
            '''
          }
        } catch (Exception e) {
          echo "Failed to get debug information: ${e.getMessage()}"
        }
      }
    }
    always {
      sh '''
        echo "üßπ Cleaning up Docker resources..."
        docker system prune -f || true
      '''
    }
  }
}

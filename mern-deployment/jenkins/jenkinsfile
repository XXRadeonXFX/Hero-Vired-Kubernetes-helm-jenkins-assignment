pipeline {
  agent any

  environment {
    DOCKER_CREDS_ID = 'DOCKER-PRINCE-CRED'
    AWS_CREDS_ID    = 'PRINCE-AWS-CRED'
    BACKEND_IMAGE   = "xxradeonxfx/learner-backend:latest"
    FRONTEND_IMAGE  = "xxradeonxfx/learner-frontend:latest"
    CLUSTER_NAME    = "prince-eks"
    REGION          = "ap-south-1"
  }

  stages {

    stage('Configure AWS CLI for EKS') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDS_ID}"]]) {
          sh '''
            aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
          '''
        }
      }
    }

    stage('Clone Backend Repo') {
      steps {
        git branch: 'main', url: 'https://github.com/UnpredictablePrashant/learnerReportCS_backend'
      }
    }

    stage('Build & Push Backend Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDS_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
          sh """
            docker build -t $BACKEND_IMAGE .
            echo \$PASSWORD | docker login -u \$USERNAME --password-stdin
            docker push $BACKEND_IMAGE
          """
        }
      }
    }

    stage('Clone Frontend Repo') {
      steps {
        dir('frontend') {
          git branch: 'main', url: 'https://github.com/UnpredictablePrashant/learnerReportCS_frontend'
        }
      }
    }

    stage('Build & Push Frontend Image') {
      steps {
        dir('frontend') {
          withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDS_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            sh """
              docker build -t $FRONTEND_IMAGE .
              echo \$PASSWORD | docker login -u \$USERNAME --password-stdin
              docker push $FRONTEND_IMAGE
            """
          }
        }
      }
    }

    stage('Deploy to EKS via Helm') {
      steps {
        dir('helm') {
          sh """
            helm upgrade --install mern ./mern-chart \
              --set backend.image=$BACKEND_IMAGE \
              --set frontend.image=$FRONTEND_IMAGE \
              --namespace default
          """
        }
      }
    }
  }

  post {
    success {
      echo '✅ Deployment Successful!'
    }
    failure {
      echo '❌ Build Failed!'
    }
  }
}
